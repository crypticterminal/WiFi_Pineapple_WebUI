{
    "small_autossh" : "AutoSSH is a service which provides persistent SSH connections. If an SSH session drops, it will be quickly re-establish by AutoSSH. This service is typically used to provide a convenient and persistent reverse shell into the WiFi Pineapple on the standard SSH port 22 - though it may be configured with any standard SSH parameters to forward any arbitrary port.",
    "settings" : "AutoSSH is a service which provides persistent SSH connections. If an SSH session drops, it will be quickly re-establish by AutoSSH. This service is typically used to provide a convenient and persistent reverse shell into the WiFi Pineapple on the standard SSH port 22 - though it may be configured with any standard SSH parameters to forward any arbitrary port.<p>Host - The username and hostname (DNS or IP) separated by @ for which to establish the SSH connection.<p>Port - The port number from which the remote server will bind.<p>Listen Port - The port number to which the remote port will bind.<p>Example: Per the defaults, the server will bind its local port 2222 back to the WiFi Pineapples port 22. In this scenario one may establish a persistent connection to their WiFi Pineapple from this reverse shell by first connecting to the remote host, and then from the remote host establishing an SSH connection to port 2222. For a video walkthrough, please watch <a href=\"https://www.youtube.com/watch?v=J798iStWLOM&index=1&list=PLAC30AB8C5D17FCB5\">Hak5 - Explaining NAT Traversal with SSH proxies</a>.",
    "pub_key" : "The Public Key of the SSH server running on the WiFi Pineapple. If the key is blank it must be generated.",
    "local_known_hosts" : "The user and hostname pairs for which the WiFi Pineapple will recognize and save in the known_hosts file. The remote server must be in the known_hosts file before autossh may establish connections automatically. Enter the user and host (IP or Domain) below and click Save to have the WiFi Pineapple attempt connection and save the remote servers key fingerprint to the known host file.",
    "known_hosts" : "The known_hosts file, saved in /root/.ssh/known_host",
    "authorized_keys" : "The authorized_keys file, saved in /root/.ssh/authorized_keys",
    "transfer_key" : "This feature is provided as a convenient way to transfer the local public key (/root/.ssh/id_rsa.pub) into the remote hosts authorized_key file. Note: This script will replace any keys currently in the remote hosts authorized_key file."
}